{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the duet-tools Documentation!","text":""},{"location":"#what-is-duet-tools","title":"What is duet-tools?","text":"<p>duet-tools is a Python package that provides a convenient interface for programmatically working with the inputs and outputs of the DUET program developed by McDanold et al. (2023) at Los Alamos National Lab. Central to the package is the ability to calibrate the values in DUET outputs to match targets supplied by the user or national datasets.</p> <p>The goals of duet-tools are to:</p> <ol> <li>Write a DUET input file.</li> <li>Read in DUET outputs for easy manipulation.</li> <li>Calibrate DUET outputs by scaling the magnitude of the parameter values while retaining the spatial distributions from DUET.</li> <li>Provide a platform for the future development of additional tools centered around DUET.</li> </ol>"},{"location":"#installation","title":"Installation","text":"<p>duet-tools can be installed using <code>pip</code>.</p>"},{"location":"#pip","title":"pip","text":"<pre><code>pip install duet-tools\n</code></pre> <p>To use the landfire module, install using the <code>landfire</code> extra using <code>pip</code>.</p> <pre><code>pip install duet-tools[landfire]\n</code></pre> <p>NOTE: the <code>landfire</code> extra is not compatible with Python 3.12.</p>"},{"location":"#issues","title":"Issues","text":"<p>If you encounter any issues with the duet-tools package, please submit an issue on the duet-tools GitHub repository issues page.</p>"},{"location":"explanation/","title":"Explanation","text":""},{"location":"explanation/#inputs-module","title":"Inputs Module","text":"<p>The <code>inputs</code> module in <code>duet-tools</code> offers a convenient way to programmatically write a DUET input file. Other inputs, such as canopy and species grids, must be supplied by the user. A DUET input file takes information about the 3D domain size (nx, ny, nz) and resolution (dx, dy, dz), the wind information (wind_direction, wind_variability), and the simulation parameters (duration, random_seed).</p>"},{"location":"explanation/#calibration-module","title":"Calibration Module","text":"<p>The <code>calibration</code> module in <code>duet-tools</code> is a central part of the package that allows the user to scale the numeric values in DUET output files to match user-supplied target values, without altering the spatial distributions calculated in DUET. Calibrated DUET files (and DUET files in general) are meant to be used by QUIC-Fire or FIRETEC fire behavior models, and export methods for those models are included.</p>"},{"location":"explanation/#working-with-duet","title":"Working with DUET","text":"<p>The <code>duet-tools</code> package assumes that the user has a license and acces to the DUET program, developed by Los Alamos National Lab. DUET distributes surface fuels based on the locations of tree canopies, the prevailing wind direction, and the time since fire. The user is responsible for parameterizing and running DUET; all calibibration in <code>duet-tools</code> is done post-hoc. By default, DUET will output two files called surface_rhof.dat and surface_depth.dat, which are Fortran-formatted arrays representing the surface fuel loading (bulk density) and surface fuel depth. They are 3D arrays where the first z layer (axis 0) is represents grass loading/moisture/depth, and the next two layers represent coniferous and deciduous tree litter, respectively.</p> <p>The <code>import_duet</code> function assumes that DUET input and output files are present in the given directory, and that they have not been renamed or altered. Alternatively, the user may import duet arrays manually by providing file names and array sizes for the necessary DUET outputs using <code>import_duet_manual</code>. Once DUET output files are imported, the resulting <code>DuetRun</code> object stores and orgainzes the arrays for all subsequent manipulations.</p>"},{"location":"explanation/#calibration-methods-and-targets","title":"Calibration Methods and Targets","text":"<p>The goal of the <code>calibration</code> module revolves around scaling the magnitude of DUET values without changing their spatial distribution. This assumes that the user has a target for the range or distribution of the values for each fuel type and/or parameter. Depending on ther user's knowledge of the target fuels, they may choose the appropriate method, specified in the <code>assign_targets</code> function.</p>"},{"location":"explanation/#methods","title":"Methods","text":"<ul> <li>maxmin: If the user has a target range of values, they can specify the maximum and minimum, and the existing DUET values will be scaled to that range without changing the underlying distribution.</li> <li>meansd: If the user has a target distribution of values, they can specify the mean and standard deviation. The distribution of DUET values will be scaled by shifting the mean and altering the spread. This method assumes that both the DUET and target values are normally distributed. Resulting values are truncated at 0.</li> <li>constant: This method may be used to change all nonzero values of a fuel type/parameter to a single specifed value. This affects all nonzero values of the fuel type/parameter, so the spatial distribution is preserved.</li> </ul> <p>Specifying methods and target values in <code>assign_targets</code> creates an instance of class <code>Targets</code>, which stores and validates the provided information.</p>"},{"location":"explanation/#fuel-types-and-parameters","title":"Fuel Types and Parameters","text":"<p>Fuels are described in QUIC-Fire and FIRETEC using different parameters that affect fire behavior. The main parameters are fuel loading, fuel moisture, and fuelbed depth of the surface fuels. DUET distributes fuel loading and depth. DUET version 1 does not output fuel moisture.</p> <p>These parameters are described for two fuel types in DUET: leaf/needle litter, which is stochastically distributed near tree canopies, and grass, which is more likely to \"grow\" in more open areas between tree canopies. DUET outputs separate arrays for each fuel parameter, with layers representing grass and litter fuel types.</p> <p><code>duet-tools</code> can calibrate any combination of fuel type and parameter with methods and targets contained in a <code>Targets</code> class object. The <code>Targets</code> class is agnostic of both fuel type and fuel parameter, and can thus be assigned to any number of fuel types and parameters. The <code>FuelParameter</code> class represents a single fuel parameter (e.g. fuel loading), storing and validating all assigned <code>Targets</code>.</p> <p>A <code>FuelParameter</code> class instance is created using the <code>set_fuel_parameter</code> function. The parameter to be calibrated is specified, and the <code>Targets</code> objects are supplied to whichever fuel type they are meant to calibrate. Grass, coniferous litter, and deciduous litter can be calibrated individually, separately by specifying them as separate arguments, or together by using the argument all or litter (they can optionally be separated back into their component fuel types after calibration).</p>"},{"location":"explanation/#calibration","title":"Calibration","text":"<p>The <code>calibrate</code> function handles all the calculations for scaling DUET values based on the supplied <code>FuelParameter</code> objects and their associated <code>Targets</code>. The <code>calibrate</code> function is meant to be called only once, after all <code>FuelParameter</code> objects have been created with all desired <code>Targets</code>. Calibration is performed on a <code>DuetRun</code> object, and new <code>DuetRun</code> object is returned.</p> <p>Because a <code>Targets</code> object can be assigned to any fuel parameter and type, the user may mix and match methods and target values for whichever fuels they wish to alter. There are no requirements to the number of parameters or types that can or cannot be calibrated.</p>"},{"location":"explanation/#using-landfire-targets","title":"Using LANDFIRE Targets","text":"<p>In many situations, fuels data for specific burn units may not be available. LANDFIRE is a national dataset that includes 30m-resoltuion Scott and Burgan 40 Fuel Model (SB40) designations. From these data, values for fuel loading, moisture, and depth can be derived. The <code>landfire</code> module offers a method of querying SB40 LANDFIRE data for a specific burn unit and assigning calibration targets based on those designations.</p> <p>To use LANDFIRE data, the user must use the <code>landfire</code> module to query LANDFIRE data (see below). Once data has been queried, the resulting <code>LandfireQuery</code> object is passed to the <code>assign_targets_from_sb40</code> function. Because LANDFIRE data most often does not follow a normal distribution, the calibration method defaults to \"maxmin\", and \"meansd\" is not recommended. Unlike <code>assign_targets</code>, which does not specify fuel parameter or type, both must be specified in <code>assign_targets_from_sb40</code>. However, the resulting <code>Targets</code> object is treated like any other, and must be assigned to the correct fuel parameter and type(s) in <code>set_fuel_parameter</code>. NOTE: the <code>landfire</code> module is only available for Python v3.10 and must be installed using <code>pip install duet-tools[landfire]</code></p>"},{"location":"explanation/#duetrun-class","title":"DuetRun Class","text":"<p>The <code>DuetRun</code> class is instantiated using the <code>import_duet</code> function. It's three attributes correspond to the 3D fuel parameter arrays that may be calibrated: <code>loading</code>, <code>moisture</code>, and <code>depth</code>.</p>"},{"location":"explanation/#pre-calibration","title":"Pre-Calibration","text":"<p>Before a DuetRun class is calibrated, it simply holds the surface_*.dat output arrays from a specified directory. A user can conveniently interface with these arrays outside of duet-tools by using the <code>to_numpy</code> function (see below).</p>"},{"location":"explanation/#post-calibration","title":"Post-Calibration","text":"<p>The <code>calibrate</code> function returns a new instance of the <code>DuetRun</code> class containing calibrated arrays. These arrays can then be exported in a few ways using methods from the <code>DuetRun</code> class.</p> <p>The <code>to_numpy</code>method  returns a numpy array of a specifed fuel parameter and type. Arrays can be returned as an integrated 2D array, where the fuel types are combined for a given parameter, or a separated 3D array, where the fuel types occupy different z-layers (axis 0).</p> <p>The <code>to_quicfire</code> method writes Fortran files (.dat) to be used in QUIC-Fire. Fuel types are integrated for each fuel parameter, and exported as a 3D array with 1 z-layer. The filenames are set to match QUIC-Fire's expected file naming system.</p>"},{"location":"explanation/#landfire-module","title":"Landfire Module","text":"<p>The <code>Landfire</code> module is an auxiliary module handling the interfacing and processing of LANDFIRE data. Data is queried using the <code>query_landfire</code> function by providing spatial data and information for the area of interest. An instance of class <code>LandfireQuery</code> is returned, which can be provided to <code>assign_targets_from_sb40</code> in the <code>calibration</code> module.</p> <p>Values for fuel loading, fuel moisture, and surface fuel depth are derived from Scott and Burgan 40 Fuel Model designations, using methods developed for FastFuels (citation). These data are available at a 30x30m resolution for the contiguous United States.</p> <p>When a fuel type is selected (e.g. grass or litter), fuel parameter values are derived from only SB40 Fuel Models that are predominantly comprised of that fuel type. Because DUET does not have a designation for shrub fuels, any SB40 Fuel Model with major shrub components are categorized as grass, since their growth patterns will also follow light availability.</p> <p>If a user attempts to assign targets from a fuel type that is not present in the area of interest, an error will be given. If there is a single parameter value for a given fuel type in the area of interest, targets will automatically be given the \"constant\" calibration method, and a warning will be issued. Using the \"meansd\" calibration method is generally discouraged, since values derived from SB40 most often do not follow a normal distribution.</p>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#inputs","title":"Inputs","text":"<p>A DUET input file can be created and written programatically. Please see inputs for full documentation.</p>"},{"location":"how-to-guides/#how-to-create-and-write-a-duet-input-file","title":"How to create and write a DUET input file","text":"<p>A DUET input file is represented by the <code>InputFile</code> class. To create an instance of the class, use the <code>InputFile.create</code> class method.</p> <pre><code>from duet_tools import InputFile\n\ninput_file = InputFile.create(\n    nx=200,\n    ny=200,\n    nz=30,\n    duration=5,\n    wind_direction=270,\n)\n</code></pre> <p>Once an <code>InputFile</code> is created, it can be written to the DUET simulation directory using <code>InputFile.to_file</code>.</p> <pre><code>from pathlib import Path\nfrom duet_tools import InputFile\n\ninput_file = InputFile.create(\n    nx=200,\n    ny=200,\n    nz=30,\n    duration=5,\n    wind_direction=270,\n)\n\nduet_dir = Path(\"path/to/duet/directory\")\n\ninput_file.to_file(directory=duet_dir)\n</code></pre> <p>This will write a file called <code>duet.in</code> to the directory. Fuel grids must be supplied by the user.</p>"},{"location":"how-to-guides/#calibration","title":"Calibration","text":"<p>DUET output files can be calibrated to match user-provided or data-derived ranges or distributions of fuel parameters. Please see calibration for full documentation.</p>"},{"location":"how-to-guides/#how-to-import-duet-output-files","title":"How to import DUET output files","text":"<p>DUET output files can be read in using the <code>import_duet</code> function. This function assumes that all input and output files used and exported by DUET are present in the provided directory. To import DUET outputs, simply specify the path to their directory and the version of DUET used to produce the outputs. The resulting object is of class <code>DuetRun</code>.</p> <p><pre><code>from duet_tools.calibration import import_duet\n\nduet_path = \"path/to/duet/files\"\nduet_run = import_duet(directory=duet_path, version=\"v2\")\n</code></pre> - directory is the path to the DUET output files. - version specifies the verision of DUET that was used.</p> <p>If DUET input files are not present, or if output file names do not follow DUET convention, the alternate function<code>import_duet_manual</code> may be used instead. Additional arguments include the names of the necessary DUET output files and the dimension sizes of the arrays.</p> <p><pre><code>from duet_tools.calibration import import_duet_manual\n\nduet_path = \"path/to/duet/files\"\nduet_run = import_duet_manual(directory=duet_path,\n                              loading_grid_name=\"rhof.dat\",\n                              moisture_grid_name=\"moist.dat\",\n                              depth_grid_name=\"depth.dat\",\n                              nx = 200,\n                              ny = 200,\n                              nsp = 5,\n                              version=\"v2\")\n</code></pre> - loading_grid_name, moisture_grid_name, and depth_grid_name are the file names of the three required DUET output arrays. - nx and ny define the number of cells in the x and y direction of the DUET grid. - nsp defines the number of separate fuel layers output by DUET. For DUET version 2, this is the tree species in the DUET input files, plus grass. For DUET version 1, this is always 2 (grass and litter).</p>"},{"location":"how-to-guides/#how-to-calibrate-duet-outputs-to-target-ranges-andor-distributions","title":"How to calibrate DUET outputs to target ranges and/or distributions","text":"<p>A target range for each fuel parameter can be defined using method=\"maxmin\". If instead you want to define a target distribution of values, use method=\"meansd\". First, make <code>Targets</code> objects for each fuel parameter and fuel type you wish to calibrate using <code>assign_targets</code>. Then, set each fuel parameter to the associated target(s) using <code>set_fuel_parameter</code>. Last, provide a list of the resulting <code>FuelParameter</code> objects to the <code>calibrate</code> function, along with the <code>DuetRun</code> to calibrate.</p> <pre><code>from duet_tools.calibration import assign_targets, set_fuel_parameter, calibrate\n\ngrass_loading = assign_targets(method=\"maxmin\", max=1.0, min=0.1)\nconiferous_loading = assign_targets(method=\"meansd\", mean=0.6, sd=0.1)\ndeciduous_loading = assign_targets(method=\"meansd\", mean=0.8, sd=0.2)\ngrass_depth = assign_targets(method=\"constant\", value=0.75)\nlitter_depth = assign_targets(method=\"constant\", value=0.2)\n</code></pre> <ul> <li>method specifies how the calibration will be conducted. When using the <code>\"maxmin\"</code> method, a target range of values should be supplied using the keyword arguments max and min. To specify a target distribution, set the method to <code>\"meansd\"</code> and use the keyword arguments mean and sd. To assign the same value to everywhere a fuel type is present, use the <code>\"constant\"</code> calibration method with a keyword argument of value.</li> </ul> <p>Once any number of <code>Targets</code> objects are created, they are used to set the targets of each desired fuel parameter.</p> <p><pre><code>loading_targets = set_fuel_parameter(\n    parameter=\"loading\",\n    grass=grass_loading,\n    coniferous = coniferous_loading,\n    deciduous=deciduous_loading,\n)\ndepth_targets = set_fuel_parameter(\n    parameter=\"depth\", grass=grass_depth, litter=litter_depth\n)\n</code></pre> - parameter can be one of <code>\"loading\"</code>, <code>\"depth\"</code>, or <code>\"moisture\"</code>. A <code>FuelParameter</code> object represents only one of thes parameters.</p> <ul> <li>keyword arguments specify which fuel type(s) should be set for a given parameter. To set fuel types individually, use any of grass, coniferous, and/or deciduous. To set coniferous and deciduous litter together, use litter. If you have targets that apply to all fuel types, rather than litter or grass separately, simply use the all keyword argument.</li> </ul> <pre><code>all_loading = assign_targets(method=\"maxmin\", max= 1.0, min=0.1)\nloading_targets = set_fuel_parameter(parameter=\"loading\", all=all_loading)\n</code></pre> <p>Last, use the calibrate function to return a new <code>DuetRun</code> object with calibrated fuel arrays.</p> <pre><code># Calibrate\ncalibrated_duet = calibrate(\n    duet_run=duet_run, fuel_parameter_targets=[loading_targets, grass_targets]\n)\n</code></pre> <ul> <li>duet_run is the <code>DuetRun</code> object that will be calibrated.</li> <li>fuel_parameter_targets is the <code>FuelParameter</code> object or list of <code>FuelParameter</code> objects that contain calibration targets.</li> </ul>"},{"location":"how-to-guides/#how-to-calibrate-duet-using-landfire-data","title":"How to calibrate DUET using LANDFIRE data","text":"<p>When fuel parameter targets are not known for the study area, calibration can be conducted using targets derived from LANDFIRE data (Scott and Burgan 40 Fuel Models; SB40). These data can be queried using the secondary <code>landfire</code> module, installed as an extra. Please see landfire for full documentation.</p> <p>Installation of the <code>landfire</code> extra requires Python &lt;3.12. Install as follows:</p> <pre><code>pip install duet-tools[landfire]\n</code></pre> <p>The first step is to use the <code>query_landfire</code> function to access fuels data for the specific area of interest. A spatial bounding box must be supplied in the form of either a geojson or shapely polygon. The function returns a <code>LandfireQuery</code> class object.</p> <pre><code>import geojson\nfrom duet_tools.landfire import query_landfire\n\ngeojson_path = \"path/to/geojson/file\"\nlandfire_path = \"path/where/landfire/files/are/saved\"\nwith open(geojson_path) as fid:\n    aoi_geojson = geojson.load(fid)\nlandfire_query = query_landfire(\n    area_of_interest=aoi_geojson,\n    directory=landfire_path,\n    input_epsg=4326\n)\n</code></pre> <ul> <li>area_of_interest may be given as either a geojson polygon or a shapely polygon. It is the spatial bounding box of the burn plot/area of interest.</li> <li>directory is the path to the directory where landfire-associated files will be download, namely a .zip file that is read in and processed under the hood.</li> <li>input_epsg is the EPSG code for the coordinate reference system and projects of the area of interest polygon.</li> <li>delete_files specifies whether or not to delete to files downloaded from the LANDFIRE website. Since the files are usually not needed after the <code>LandfireQuery</code> object is returned, it defaults to True.</li> </ul> <p>A utility function allows a user to read in a shapefile to a geojson.</p> <pre><code>from duet_tools.utils import read_shapefile_to_geojson\n\nshapefile_path = \"path/to/shapefile.shp\"\naoi_geojson = read_shapefile_to_geojson(shapefile_path)\n</code></pre> <p>Once LANDFIRE data is queried, targets can be assigned for whatever fuel parameters and types the user desires using <code>assign_targets_from_sb40</code>. Unlike <code>assign_targets</code>, the fuel parameter and fuel type must be specified for targets to be assigned.</p> <p>NOTE: Coniferous and deciduous litter targets cannot be defined separately from LANDFIRE. Use <code>litter</code> and/ore <code>grass</code> only</p> <pre><code>from duet_tools.landfire import assign_targets_from_sb40\n\nlitter_loading_sb40 = assign_targets_from_sb40(\n    query=landfire_query,\n    fuel_type=\"litter\",\n    parameter=\"loading\",\n    method=\"maxmin\",\n)\n</code></pre> <p>A <code>Targets</code> object is returned with values derived from the SB40 designations in the area of interest. An error will be issued if the given fuel type is not present in the area of interest.</p> <p>The default calibration method is \"maxmin\". If the fuel parameter has only a single value for the given fuel type, the chosen calibration method will be changed to \"constant\" (if not already) and a warning will be issued. If \"meansd\" is used, a warning will be issued, since specifying a distribution from SB40-derived values is discouraged. If the \"constant\" calibration method is specified and more than one value for the given fuel parameter and type is present, an error will be issued.</p> <p>Once a <code>Targets</code> object is obtained from <code>assing_targets_from_sb40</code> calibration proceeds in the normal way.</p> <pre><code>loading_targets = set_fuel_parameter(\n    parameter=\"loading\", litter=litter_loading_sb40\n)\ncalibrated_duet = calibrate(\n    duet_run=duet_run, fuel_parameter_targets=loading_targets\n)\n</code></pre>"},{"location":"how-to-guides/#how-to-create-numpy-arrays-from-calibrated-duet-outputs","title":"How to create numpy arrays from calibrated DUET outputs","text":"<p>Once a <code>DuetRun</code> object is created by the <code>calibrate</code> function, its constituent arrays can be exported to numpy ndarrays. Specify the parameter and fuel type.</p> <pre><code>grass_loading_array = calibrated_duet.to_numpy(\n    fuel_type=\"grass\", fuel_parameter=\"loading\"\n) #2D array\nlitter_depth_array = calibrated_duet.to_numpy(\n    fuel_type=\"litter\", fuel_parameter=\"depth\"\n)\nintegrated_loading = calibrated_duet.to_numpy(\n    fuel_type=\"integrated\", fuel_parameter=\"loading\"\n) #2D array of grass and litter\nseparated_loading = calibrated_duet.to_numpy(\n    fuel_type=\"separated\", fuel_parameter=\"depth\n) #3D array where grass is z-layer 0, coniferous litter is z-layer 1, and deciduous litter is z-layer 2\n</code></pre>"},{"location":"how-to-guides/#how-to-export-quicfire-dat-files-from-calibrated-duet-outputs","title":"How to export quicfire .dat files from calibrated DUET outputs","text":"<p>The calibrated <code>DuetRun</code> object can also be exported as QUIC-Fire fuel input files to a specified directory. The resulting .dat files are 3D, with a single z-layer of integrated fuel types for each parameter. Naming follows the explected QUIC-Fire filenames of \"treesrhof.dat\", \"treesmoist.dat\", and/or \"treesfueldepth.dat\".</p> <pre><code>quicfire_path = \"path/to/quicfire\"\ncalibrated_duet.to_quicfire(directory=quicfire_path)\n</code></pre> <p>If a parameter array is not present in the <code>duet_run</code> object, it will not be written to a file. The user may also choose not to export any parameter by setting its argement to False.</p> <pre><code>quicfire_path = \"path/to/quicfire\"\ncalibrated_duet.to_quicfire(directory=quicfire_path, moisture=False)\n</code></pre> <p>If the directory already contains any of those three files, an error will be raised. To overwrite those files, set overwrite to True.</p> <pre><code>quicfire_path = \"path/to/quicfire\"\ncalibrated_duet.to_quicfire(directory=quicfire_path, moisture=False, overwrite=True)\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#duet_tools.calibration","title":"duet_tools.calibration","text":"<p>DUET Tools Calibration module</p>"},{"location":"reference/#duet_tools.calibration.DuetRun","title":"DuetRun","text":"<p>Class containing all arrays for a DUET run.</p> <p>Attributes:</p> Name Type Description <code>loading</code> <code>ndarray</code> <p>3D Array of fuel loading (bulk density in kg/m^3) values in the format exported by DUET: Grass fuel load in first layer, litter fuel load for each tree species in subsequent layers.</p> <code>moisture</code> <code>ndarray</code> <p>3D Array of fuel moisture content (%) values in the format exported by DUET: Grass moisture content in first layer, litter moisture content for each tree species in subsequent layers.</p> <code>depth</code> <code>ndarray</code> <p>3D Array of fuelbd depth (m) values in the format exported by DUET: Grass height in first layer, litter depth for each tree species in subsequent layers.</p> <code>duet_version</code> <code>str</code> <p>DUET version. Must be one of \"v1\" or \"v2\".</p>"},{"location":"reference/#duet_tools.calibration.DuetRun.to_quicfire","title":"to_quicfire","text":"<pre><code>to_quicfire(\n    directory: str | Path,\n    loading: bool = True,\n    moisture: bool = True,\n    depth: bool = True,\n    overwrite: bool = False,\n) -&gt; None\n</code></pre> <p>Writes a DuetRun object to QUIC-fire fuel .dat inputs to a directory: treesrhof.dat, treesmoist.dat, treesfueldepth.dat</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | Path</code> <p>Path to directory for writing QUIC-fire files</p> required <code>loading</code> <code>bool</code> <p>Whether to export the fuel loading array. Defaults to True.</p> <code>True</code> <code>moisture</code> <code>bool</code> <p>Whether to export the moisture content array. Defaults to True.</p> <code>True</code> <code>depth</code> <code>bool</code> <p>Whether to export the fuelbed depth array. Defaults to True.</p> <code>True</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite trees*.dat files already present in the directory. If files exist, raises an error if True, warning if False. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Writes QUIC-Fire .dat files to the provided directory.</p>"},{"location":"reference/#duet_tools.calibration.DuetRun.to_numpy","title":"to_numpy","text":"<pre><code>to_numpy(fuel_type: str, fuel_parameter: str) -&gt; np.ndarray\n</code></pre> <p>Returns a numpy array of the provided fuel type and parameter.</p> <p>Parameters:</p> Name Type Description Default <code>fuel_type</code> <code>str</code> <p>Fuel type of desired array. Must be one of \"integrated, \"separated\", \"grass\", \"litter\", \"deciduous\", or \"coniferous. \"integrated\" : returns a vertically-integrated array of all fuel types.     Array remains 3D, with shape (1,ny,nx). Integration method depends on     fuel parameter. \"separated\" : returns a 3D array of shape (nlitter,ny,nx), where the first layer     is grass, and the subsequent layers are litter. If using DUET v1, nlitter = 1;     if using DUET v2, nlitter is 2 (deciduous and coniferous). \"grass\" : returns a 3D array of the chosen parameter for grass, with shape (1,ny,nx) \"litter\" : returns a 3D array of integrated litter values for all tree species, with shape (1,ny,nx). \"coniferous\" : returns a 3D array of litter values for coniferous tree species, with shape (1,ny,nx). \"deciduous\" : returns a 3D array of litter values for deciduous tree species, with shape (1,ny,nx).</p> required <code>fuel_parameter</code> <code>str</code> <p>Fuel parameter of desired array. Must be one of \"loading\", \"moisture\", or \"depth\".</p> required <p>Returns:</p> Type Description <code>np.ndarray :</code> <p>Numpy array of the provided fuel type and parameter.</p>"},{"location":"reference/#duet_tools.calibration.Targets","title":"Targets","text":"<p>Class containing and validating target methods and values for fuel parameters. Should be instantiated using <code>assign_targets</code>.</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>Method by which to calibrate to the target values. Must be one of \"maxmin\", \"meansd\", or \"constant\".</p> <code>args</code> <code>list[str]</code> <p>Sting(s) to be used as keyword arguments for calibration, which correspond to the calibration method. For maxmin calibration, use [\"max\",\"min\"]; for meansd calibration, use [\"mean\",\"sd\"]; for constant calibration, use []\"value\"].</p> <code>targets</code> <code>list</code> <p>Calibration targets, which correspond to the elements of Targets.args.</p>"},{"location":"reference/#duet_tools.calibration.FuelParameter","title":"FuelParameter","text":"<p>Class containing and validating calibration targets for a single fuel parameter. A single Target object can be set for multiple fuel types. Should be instantiated using <code>set_fuel_parameter</code></p> <p>Attributes:</p> Name Type Description <code>parameter</code> <code>str</code> <p>Fuel parameter for which targets should be set. Must be one of \"loading\", \"moisture\", or \"depth\".</p> <code>fuel_types</code> <code>list[str]</code> <p>Fuel type(s) to which targets should be set. May be any of \"grass\", \"litter\", \"coniferous\", \"deciduous\", or \"all\".</p> <code>targets</code> <code>list[Targets]</code> <p>Targets to be set to the provided parameter and fuel types.</p>"},{"location":"reference/#duet_tools.calibration.import_duet_manual","title":"import_duet_manual","text":"<pre><code>import_duet_manual(\n    directory: str | Path,\n    loading_grid_name: str,\n    moisture_grid_name: str,\n    depth_grid_name: str,\n    nx: int,\n    ny: int,\n    nsp: int,\n    version: str,\n) -&gt; DuetRun\n</code></pre> <p>Creates a DuetRun object from DUET output files</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | Path</code> <p>Path to directory storing the DUET output files surface_rhof.dat and surface_depth.dat</p> required <code>loading_grid_name</code> <code>str</code> <p>File name of fuel loading (bulk density) DUET output.</p> required <code>moisture_grid_name</code> <code>str</code> <p>File name of fuel moisture DUET output.</p> required <code>depth_grid_name</code> <code>str</code> <p>File name of fuelbed depth DUET output.</p> required <code>nx</code> <code>int</code> <p>Number of DUET domain cells in the x-direction.</p> required <code>ny</code> <code>int</code> <p>Number of DUET domain cells in the y-direction.</p> required <code>nsp</code> <code>int</code> <p>Number of vegetation species (tree species + grass) in the DUET outputs. Must be 2 (grass and litter) for DUET v1.</p> required <code>version</code> <code>str</code> <p>DUET version that produced the outputs. Must be one of [\"v1\",\"v2\"].</p> required <p>Returns:</p> Type Description <code>Instance of class DuetRun</code>"},{"location":"reference/#duet_tools.calibration.import_duet","title":"import_duet","text":"<pre><code>import_duet(\n    directory: Path | str, version: str = \"v2\"\n) -&gt; DuetRun\n</code></pre> <p>Creates a DuetRun object from DUET input and output files. Assumes all files from a DUET run are present and unaltered. To import a DUET run manually, use <code>import_duet_manual</code>.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | Path</code> <p>Path to directory storing the DUET output files surface_rhof.dat and surface_depth.dat and the DUET input files duet.in and treesspcd.dat</p> required <code>version</code> <code>str</code> <p>DUET version that produced the outputs. Must be one of [\"v1\",\"v2\"]. Defaults to \"v2\".</p> <code>'v2'</code> <p>Returns:</p> Type Description <code>Instance of class DuetRun</code>"},{"location":"reference/#duet_tools.calibration.assign_targets","title":"assign_targets","text":"<pre><code>assign_targets(method: str, **kwargs: float) -&gt; Targets\n</code></pre> <p>Assigns target values and calculation method for exactly one fuel type and parameter</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Calibration method for the target values provided. Must be one of: \"constant\", \"maxmin\", \"meansd\", \"sb40\".</p> required <code>**kwargs</code> <code>float</code> <p>Keyword arguments correspond to the calibration method. For \"maxmin\" method, kwargs keys must be <code>max</code> and <code>min</code>. For \"meansd\" method, kwargs keys must be <code>mean</code> and <code>sd</code>. For \"constant\" method, **kwargs key must be <code>value</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Instance of class Targets</code>"},{"location":"reference/#duet_tools.calibration.set_fuel_parameter","title":"set_fuel_parameter","text":"<pre><code>set_fuel_parameter(parameter: str, **kwargs: Targets)\n</code></pre> <p>Sets calibration targets for grass, litter, both separately, or all fuel types together, for a single fuel parameter.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>str</code> <p>Fuel parameter for which to set targets</p> required <code>**kwargs</code> <code>Targets</code> <p>grass : Targets     Grass calibration targets. Only the grass layer of the DUET parameter     array will be calibrated. litter : Targets     Litter calibration targets. Only the litter layer(s) of the DUET     parameter array will be calibrated. Coniferous and deciduous litter will     be calibrated together. coniferous : Targets     Coniferous litter calibration targets. Only the coniferous litter layer of     the DUET parameter array will be calibrated. deciduous : Targets     Deciduous litter calibration targets. Only the deciduous litter layer of     the DUET parameter array will be calibrated. all : Targets     Calibration targets for all (both) fuel types. All layers of the     DUET parameter array will be calibrated together.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>FuelParameter</code> <p>Object representing targets for the given fuel parameter, for each provided fuel type</p>"},{"location":"reference/#duet_tools.calibration.set_loading","title":"set_loading","text":"<pre><code>set_loading(**kwargs: Targets)\n</code></pre> <p>Sets fuel loading calibration targets for grass, litter, both separately, or all fuel types together.</p> <p>Parameters:</p> Name Type Description Default <code>grass</code> <code>Targets | None</code> <p>Grass calibration targets. Only the grass layer of the DUET fuel loading array will be calibrated.</p> required <code>litter</code> <code>Targets | None</code> <p>Litter calibration targets. Only the litter layer(s) of the DUET fuel loading array will be calibrated. Coniferous and deciduous litter will be calibrated together.</p> required <code>coniferous</code> <code>Targets | None</code> <p>Coniferous litter calibration targets. Only the coniferous litter layer of the DUET parameter array will be calibrated.</p> required <code>deciduous</code> <code>Targets | None</code> <p>Deciduous litter calibration targets. Only the deciduous litter layer of the DUET fuel loading array will be calibrated.</p> required <code>all</code> <code>Targets | None</code> <p>Calibration targets for all (both) fuel types. All layers of the DUET fuel loading array will be calibrated together.</p> required <p>Returns:</p> Name Type Description <code>FuelParameter</code> <p>Object representing fuel loading targets for each provided fuel type</p>"},{"location":"reference/#duet_tools.calibration.set_moisture","title":"set_moisture","text":"<pre><code>set_moisture(**kwargs: Targets)\n</code></pre> <p>Sets moisture calibration targets for grass, litter, both separately, or all fuel types together.</p> <p>Parameters:</p> Name Type Description Default <code>grass</code> <code>Targets | None</code> <p>Grass calibration targets. Only the grass layer of the DUET moisture array will be calibrated.</p> required <code>litter</code> <code>Targets | None</code> <p>Litter calibration targets. Only the litter layer(s) of the DUET moisture array will be calibrated. Coniferous and deciduous litter will be calibrated together.</p> required <code>coniferous</code> <code>Targets | None</code> <p>Coniferous litter calibration targets. Only the coniferous litter layer of the DUET parameter array will be calibrated.</p> required <code>deciduous</code> <code>Targets | None</code> <p>Deciduous litter calibration targets. Only the deciduous litter layer of the DUET moisture array will be calibrated.</p> required <code>all</code> <code>Targets | None</code> <p>Calibration targets for all (both) fuel types. All layers of the DUET moisture array will be calibrated together.</p> required <p>Returns:</p> Name Type Description <code>FuelParameter</code> <p>Object representing moisture targets for each provided fuel type</p>"},{"location":"reference/#duet_tools.calibration.set_depth","title":"set_depth","text":"<pre><code>set_depth(**kwargs: Targets)\n</code></pre> <p>Sets fuelbed depth calibration targets for grass, litter, both separately, or all fuel types together.</p> <p>Parameters:</p> Name Type Description Default <code>grass</code> <code>Targets | None</code> <p>Grass calibration targets. Only the grass layer of the DUET depth array will be calibrated.</p> required <code>litter</code> <code>Targets | None</code> <p>Litter calibration targets. Only the litter layer(s) of the DUET depth array will be calibrated. Coniferous and deciduous litter will be calibrated together.</p> required <code>coniferous</code> <code>Targets | None</code> <p>Coniferous litter calibration targets. Only the coniferous litter layer of the DUET parameter array will be calibrated.</p> required <code>deciduous</code> <code>Targets | None</code> <p>Deciduous litter calibration targets. Only the deciduous litter layer of the DUET depth array will be calibrated.</p> required <code>all</code> <code>Targets | None</code> <p>Calibration targets for all (both) fuel types. All layers of the DUET depth array will be calibrated together.</p> required <p>Returns:</p> Name Type Description <code>FuelParameter</code> <p>Object representing depth targets for each provided fuel type</p>"},{"location":"reference/#duet_tools.calibration.calibrate","title":"calibrate","text":"<pre><code>calibrate(\n    duet_run: DuetRun,\n    fuel_parameter_targets: (\n        list[FuelParameter] | FuelParameter\n    ),\n) -&gt; DuetRun\n</code></pre> <p>Calibrates the arrays in a DuetRun object using the provided targets and methods for one or more fuel types.</p> <p>Parameters:</p> Name Type Description Default <code>duet_run</code> <code>DuetRun</code> <p>The DUET run to calibrate</p> required <code>fuel_type_targets</code> <code>FuelParameters | list(FuelParameters)</code> <p>FuelParameters object or list of FuelParameters objects for the fuel types to be calibrated.</p> required <p>Returns:</p> Type Description <code>Instance of class DuetRun with calibrated fuel arrays</code>"},{"location":"reference/#duet_tools.calibration.get_unit_from_fastfuels","title":"get_unit_from_fastfuels","text":"<pre><code>get_unit_from_fastfuels(zroot)\n</code></pre> <p>Creates a geojson bounding box of a fastfuels domain.</p> <p>Returns:</p> Type Description <code>geojson</code>"},{"location":"reference/#duet_tools.calibration.get_unit_from_shapefile","title":"get_unit_from_shapefile","text":"<pre><code>get_unit_from_shapefile(directory: str | Path)\n</code></pre> <p>Reads in a shapefile and returns a geojson bounding box.</p> <p>Returns:</p> Type Description <code>geojson</code>"},{"location":"reference/#duet_tools.calibration.write_numpy_to_quicfire","title":"write_numpy_to_quicfire","text":"<pre><code>write_numpy_to_quicfire(\n    array: ndarray, directory: str | Path, filename: str\n)\n</code></pre> <p>Writes a numpy array to a QUIC-Fire fuel input (.dat) in the chosen directory.</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>ndarray</code> <p>The numpy array to be written. Must be 3D.</p> required <code>directory</code> <code>str | Path</code> <p>The directory where the file will be written.</p> required <code>filename</code> <code>str</code> <p>The name of the file to be written. Must end in \".dat\".</p> required <p>Returns:</p> Type Description <code>None</code> <p>File is written to disk.</p>"},{"location":"reference/#duet_tools.inputs","title":"duet_tools.inputs","text":"<p>DUET inputs module</p>"},{"location":"reference/#duet_tools.inputs.InputFile","title":"InputFile","text":"<p>Class representing a DUET input file.</p> <p>Attributes:</p> Name Type Description <code>nx</code> <code>int</code> <p>Number of cells in the x-direction.</p> <code>ny</code> <code>int</code> <p>Number of cells in the y-direction.</p> <code>nz</code> <code>int</code> <p>Number of cells in the z-direction.</p> <code>dx</code> <code>float</code> <p>Cell size in the x-direction (m)</p> <code>dy</code> <code>float</code> <p>Cell size in the y-direction (m)</p> <code>dz</code> <code>float</code> <p>Cell size in the z-direction (m)</p> <code>random_seed</code> <code>int</code> <p>Random number seed.</p> <code>wind_direction</code> <code>float</code> <p>Wind direction (degrees).</p> <code>wind_variability</code> <code>float</code> <p>Wind direction variability (degrees).</p> <code>duration</code> <p>Duration of simulation (years).</p>"},{"location":"reference/#duet_tools.inputs.InputFile.to_file","title":"to_file","text":"<pre><code>to_file(directory: Path | str)\n</code></pre> <p>Writes a DUET input file to the specified path</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Path | str</code> <p>Directory for writing DUET input file</p> required <p>Returns:</p> Name Type Description <code>None</code> <p>Writes duet.in to directory</p>"},{"location":"reference/#duet_tools.inputs.InputFile.from_directory","title":"from_directory  <code>classmethod</code>","text":"<pre><code>from_directory(dir: Path | str)\n</code></pre> <p>Creates an instance of class InputFile from a directory with a DUET input deck</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>Path | str</code> <p>Path to the directory containing the DUET input deck.</p> required <p>Returns:</p> Type Description <code>InputFile</code>"},{"location":"reference/#duet_tools.landfire","title":"duet_tools.landfire","text":"<p>Functions for interfacing with the LandFire API and processing the outputs</p>"},{"location":"reference/#duet_tools.landfire.LandfireQuery","title":"LandfireQuery","text":"<p>Class containing the information from a LandFire query, to be passed to assign_targets()</p>"},{"location":"reference/#duet_tools.landfire.query_landfire","title":"query_landfire","text":"<pre><code>query_landfire(\n    area_of_interest: Polygon | Polygon,\n    year: str,\n    directory: str | Path,\n    input_epsg: int,\n    delete_files: bool = True,\n) -&gt; LandfireQuery\n</code></pre> <p>Creates and submits a LANDFIRE query for a specified area of interest.</p> <p>Parameters:</p> Name Type Description Default <code>area_of_interest</code> <code>Polygon | Polygon</code> <p>Area in which to query LANDFIRE data. For best results, dimensions in meters should match (nxdx, nydy) of DUET domain.</p> required <code>year</code> <code>int</code> <p>Year of LANDFIRE data to query. Must be one of [2019, 2020, 2022].</p> required <code>directory</code> <code>Path | str</code> <p>Directory where files associated with the LANDFIRE query will be saved.</p> required <code>input_epsg</code> <code>int</code> <p>EPSG number for CRS of area_of_interest polygon</p> required <code>delete_files</code> <code>bool = True</code> <p>Whether to delete intermediate files created in the process of querying LANDFIRE data. Defaults to True</p> <code>True</code> <p>Returns:</p> Type Description <code>LandfireQuery</code>"},{"location":"reference/#duet_tools.landfire.assign_targets_from_sb40","title":"assign_targets_from_sb40","text":"<pre><code>assign_targets_from_sb40(\n    query: LandfireQuery,\n    fuel_type: str,\n    parameter: str,\n    method: str = \"maxmin\",\n) -&gt; Targets\n</code></pre> <p>Assign a calibration target and method for a given fuel type and parameter.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>LandfireQuery</code> <p>An object of class LandfireQuery created with query_landfire. Calibration targets will be calculated from these values.</p> required <code>fuel_type</code> <code>str</code> <p>The fuel type to obtain target values for. Must be one of \"grass\", \"litter\", or \"all\".</p> required <code>parameter</code> <code>str</code> <p>The fuel parameter to obtain target values for. Must be one of \"loading\", \"moisture\", or \"depth\".</p> required <code>method</code> <code>str</code> <p>The desired calibration method for the sb40-derived targets. Must be one of \"maxmin\", \"meandsd\", or \"constant\". Default is \"maxmin\". \"constant\" is only recommended if only one parameter value is present for the given fuel type. \"meansd\" is not recommended since values often do not follow a normal distribution.</p> <code>'maxmin'</code> <p>Returns:</p> Name Type Description <code>Targets</code> <code>Targets</code> <p>A Targets object with values derived from Landfire and SB40 fuel models</p>"},{"location":"reference/#duet_tools.utils","title":"duet_tools.utils","text":"<p>Utility functions for DUET tools modules</p>"},{"location":"reference/#duet_tools.utils.read_dat_to_array","title":"read_dat_to_array","text":"<pre><code>read_dat_to_array(\n    directory: str | Path,\n    filename: str,\n    nx: int,\n    ny: int,\n    nz: int = None,\n    nsp: int = None,\n    order: str = \"F\",\n    dtype: type = np.float32,\n) -&gt; np.ndarray\n</code></pre> <p>Reads a fortran binary file (.dat) to a numpy array</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | Path</code> <p>Path to directory of the .dat file.</p> required <code>filename</code> <code>str</code> <p>Name of the .dat file</p> required <code>nx</code> <code>int</code> <p>Number of cells in the x-direction</p> required <code>ny</code> <code>int</code> <p>Number of cells in the y-direction</p> required <code>nz</code> <code>int</code> <p>Number of cells in the z-direction</p> <code>None</code> <code>nsp</code> <code>int</code> <p>Number of species</p> <code>None</code> <code>order</code> <code>str</code> <p>Order of the .dat file. Must be one of \"C\" or \"F\". Defaults to \"F\".</p> <code>'F'</code> <code>dtype</code> <code>type</code> <p>Data type of the array. Defaults to np.float32</p> <code>float32</code> <p>Returns:</p> Type Description <code>    A numpy array with shape (nz, ny, nx).</code>"},{"location":"reference/#duet_tools.utils.write_array_to_dat","title":"write_array_to_dat","text":"<pre><code>write_array_to_dat(\n    array: ndarray,\n    dat_name: str,\n    output_dir: Path | str,\n    dtype: type = np.float32,\n    reshape: bool = False,\n) -&gt; None\n</code></pre> <p>Write a numpy array to a fortran binary file (.dat).</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>ndarray</code> <p>numpy array to be written to a file</p> required <code>dat_name</code> <code>str</code> <p>Filename ending with .dat</p> required <code>output_dir</code> <code>Path | str</code> <p>Directory where file will be written</p> required <code>dtype</code> <code>type</code> <p>Data type of the array. Defaults to np.float32</p> <code>float32</code> <code>reshape</code> <code>bool</code> <p>Whether to reshape the array. Array dimensions in duet-tools are either (nz,ny,nx) or (nsp,ny,nx) and will be written in row-major order, meaning that with column-major order (default for fortran), they will be (nx, ny, nz). Reshaping (nsp, ny, nx) arrays to (ny, nx, nsp) will result in the column-major order of (nsp, nx, ny), which is expected by DUET and LANL Trees. If True, reshaping will only be applied to 3D arrays. Defaults to False.</p> <code>False</code>"},{"location":"reference/#duet_tools.utils.read_shapefile_to_geojson","title":"read_shapefile_to_geojson","text":"<pre><code>read_shapefile_to_geojson(path: Path) -&gt; geojson.Polygon\n</code></pre> <p>Read a shapefile and convert to a geojson polygon. May be used to query LANDFIRE data. Assumes the shapefile has Polygon geometry. Only the first feature is converted to a geojson.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to shapefile. File may be compressed (.zip), or uncompressed (.shp) with constituent files in the same directory.</p> required <p>Returns:</p> Type Description <code>A geojson Polygon object.</code>"},{"location":"reference/#duet_tools.example","title":"duet_tools.example","text":""},{"location":"tutorials/","title":"Tutorials","text":"<p>Tutorials coming soon!</p>"}]}